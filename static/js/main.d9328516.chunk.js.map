{"version":3,"sources":["components/SeasonDisplay.js","components/Loader.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","season","latitude","month","Date","getMonth","handleGetSeason","className","Loader","defaultProps","App","state","errorMessage","handleLatitudeFetch","window","navigator","geolocation","getCurrentPosition","coords","setState","err","message","renderContent","this","Component","ReactDom","render","document","querySelector"],"mappings":"mNAaMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,2BACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,6BACNC,SAAU,eAGDE,EAAgB,SAAC,GAAkB,IACxCC,EArBgB,SAACC,GACvB,IAAMC,GAAQ,IAAIC,MAAOC,WACzB,OACGH,EAAW,GAAKC,EAAQ,GAAKA,EAAQ,GACrCD,EAAW,GAAKC,EAAQ,GAAKA,EAAQ,EAE/B,SACG,SAcGG,CAD8B,EAAfJ,UAAe,EAElBP,EAAaM,GAAhCH,EAFqC,EAErCA,SAAUD,EAF2B,EAE3BA,KAElB,OACE,yBAAKU,UAAS,yBAAoBN,IAChC,uBAAGM,UAAS,UAAKT,EAAL,6BACZ,4BAAKD,GACL,uBAAGU,UAAS,UAAKT,EAAL,gCC7BLU,EAAS,SAAC,GAAc,IAAZX,EAAW,EAAXA,KACvB,OACE,yBAAKU,UAAU,oBACb,yBAAKA,UAAU,sBAAsBV,KAK3CW,EAAOC,aAAe,CACpBZ,KAAM,c,ICNFa,E,4MACJC,MAAQ,CACNT,SAAU,KACVU,aAAc,M,EAGhBC,oBAAsB,WACpBC,OAAOC,UAAUC,YAAYC,oBAC3B,gBAAaf,EAAb,EAAGgB,OAAUhB,SAAb,OAA8B,EAAKiB,SAAS,CAAEjB,gBAC9C,SAACkB,GAAD,OAAS,EAAKD,SAAS,CAAEP,aAAcQ,EAAIC,c,EAO/CC,cAAgB,WACd,OAAI,EAAKX,MAAMC,aAEX,yBAAKL,UAAU,aACb,6DACA,6BACA,wCAAc,EAAKI,MAAMC,eAG1B,EAAKD,MAAMC,cAAiB,EAAKD,MAAMT,SAG1C,6BACE,kBAAC,EAAD,CAAeA,SAAU,EAAKS,MAAMT,YAH/B,kBAAC,EAAD,CAAQL,KAAK,+B,kEAbtB0B,KAAKV,wB,+BAsBL,OAAO,6BAAMU,KAAKD,qB,GAnCJE,aAuClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.d9328516.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SeasonDisplay.css\";\n\nconst handleGetSeason = (latitude) => {\n  const month = new Date().getMonth();\n  if (\n    (latitude > 0 && month > 2 && month < 9) ||\n    (latitude < 0 && month > 8 && month < 3)\n  )\n    return \"summer\";\n  else return \"winter\";\n};\n\nconst seasonConfig = {\n  summer: {\n    text: \"damnnn! it's hot outside\",\n    iconName: \"sun\",\n  },\n  winter: {\n    text: \"hoooooh! it's cold outside\",\n    iconName: \"snowflake\",\n  },\n};\nexport const SeasonDisplay = ({ latitude }) => {\n  const season = handleGetSeason(latitude);\n  const { iconName, text } = seasonConfig[season];\n\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`${iconName} icon massive icon-left`} />\n      <h1>{text}</h1>\n      <i className={`${iconName} icon massive icon-right`} />\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const Loader = ({ text }) => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">{text}</div>\n    </div>\n  );\n};\n\nLoader.defaultProps = {\n  text: \"loading...\",\n};\n","import ReactDom from \"react-dom\";\nimport React, { Component } from \"react\";\nimport { SeasonDisplay } from \"./components/SeasonDisplay\";\nimport { Loader } from \"./components/Loader\";\n\nclass App extends Component {\n  state = {\n    latitude: null,\n    errorMessage: null,\n  };\n\n  handleLatitudeFetch = () => {\n    window.navigator.geolocation.getCurrentPosition(\n      ({ coords: { latitude } }) => this.setState({ latitude }),\n      (err) => this.setState({ errorMessage: err.message })\n    );\n  };\n  componentDidMount() {\n    this.handleLatitudeFetch();\n  }\n\n  renderContent = () => {\n    if (this.state.errorMessage)\n      return (\n        <div className=\"errorText\">\n          <h1>We can't get you location :( </h1>\n          <br />\n          <h1>Because: {this.state.errorMessage}</h1>\n        </div>\n      );\n    if (!this.state.errorMessage && !this.state.latitude)\n      return <Loader text=\"Just allow!!! Looool \\0/\" />;\n    return (\n      <div>\n        <SeasonDisplay latitude={this.state.latitude} />\n      </div>\n    );\n  };\n\n  render() {\n    return <div>{this.renderContent()}</div>;\n  }\n}\n\nReactDom.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}